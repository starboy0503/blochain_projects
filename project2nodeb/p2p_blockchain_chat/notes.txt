ðŸ–¥ Step 1: Start Node A
cd ~/Desktop/blockchain/project2/p2p_blockchain_chat
export PORT=5001
python3 node.py


âœ… Should print:

 * Running on http://127.0.0.1:5001

ðŸ–¥ Step 2: Start Node B
cd ~/Desktop/blockchain/project2nodeb/p2p_blockchain_chat
export PORT=5002
python3 node.py


âœ… Should print:

 * Running on http://127.0.0.1:5002

ðŸ–¥ Step 3: Register Peers

Tell Node A about Node B:

curl -X POST http://127.0.0.1:5001/peers/register \
     -H "Content-Type: application/json" \
     -d '{"host": "http://127.0.0.1:5002"}'


Tell Node B about Node A:

curl -X POST http://127.0.0.1:5002/peers/register \
     -H "Content-Type: application/json" \
     -d '{"host": "http://127.0.0.1:5001"}'


âœ… Check:

curl http://127.0.0.1:5001/peers
curl http://127.0.0.1:5002/peers


Each should list the other.

ðŸ–¥ Step 4: Run Tkinter Chat Clients

Node Aâ€™s client:

cd ~/Desktop/blockchain/project2/p2p_blockchain_chat
python3 tkinter-client.py 5001


Node Bâ€™s client:

cd ~/Desktop/blockchain/project2nodeb/p2p_blockchain_chat
python3 tkinter-client.py 5002


âœ… Title bar shows which node each client is connected to.

ðŸ–¥ Step 5: Send a Message

In Node Bâ€™s client:

Click Peers â†’ should show http://127.0.0.1:5001.

Select it from dropdown.

Type "Hello from Node B" â†’ press Send.

Node Aâ€™s ðŸ“¥ box shows:

(pending) http://127.0.0.1:5002 â†’ You: Hello from Node B


In either client, click Mine.

Transaction is mined into a block.

Node Aâ€™s ðŸ“¥ shows:

http://127.0.0.1:5002 â†’ You: Hello from Node B

ðŸ–¥ Step 6: Debugging (if inbox is empty)

Check pending messages:

curl http://127.0.0.1:5001/pending | jq .


Check full blockchain:

curl http://127.0.0.1:5001/chain | jq .


If pending is empty â†’ message never arrived (check peers).
If pending has the message but Tkinter shows nothing â†’ inbox function is not refreshing.

âœ… Final Flow Recap

Send â†’ goes into /pending immediately.

Mine â†’ moves it from /pending to /chain.

Inbox â†’ shows (pending) messages + confirmed ones.

Works between Node A (5001) and Node B (5002).